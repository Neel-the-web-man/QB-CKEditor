// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: options.sql

package db

import (
	"context"
	"database/sql"
)

const createOption = `-- name: CreateOption :one
INSERT INTO options(question_id,option_text,option_index,is_correct,created_at)
VALUES ($1,$2,$3,$4,$5)
RETURNING id, question_id, option_text, option_index, is_correct, created_at
`

type CreateOptionParams struct {
	QuestionID  int32
	OptionText  string
	OptionIndex int16
	IsCorrect   bool
	CreatedAt   sql.NullTime
}

func (q *Queries) CreateOption(ctx context.Context, arg CreateOptionParams) (Option, error) {
	row := q.db.QueryRowContext(ctx, createOption,
		arg.QuestionID,
		arg.OptionText,
		arg.OptionIndex,
		arg.IsCorrect,
		arg.CreatedAt,
	)
	var i Option
	err := row.Scan(
		&i.ID,
		&i.QuestionID,
		&i.OptionText,
		&i.OptionIndex,
		&i.IsCorrect,
		&i.CreatedAt,
	)
	return i, err
}

const deleteOptionsByQuestionID = `-- name: DeleteOptionsByQuestionID :exec
DELETE FROM options
WHERE question_id = $1
`

func (q *Queries) DeleteOptionsByQuestionID(ctx context.Context, questionID int32) error {
	_, err := q.db.ExecContext(ctx, deleteOptionsByQuestionID, questionID)
	return err
}

const getOptionsByQuestionID = `-- name: GetOptionsByQuestionID :many
SELECT id, question_id, option_text, option_index, is_correct, created_at FROM options
WHERE question_id = $1
ORDER BY option_index
`

func (q *Queries) GetOptionsByQuestionID(ctx context.Context, questionID int32) ([]Option, error) {
	rows, err := q.db.QueryContext(ctx, getOptionsByQuestionID, questionID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Option
	for rows.Next() {
		var i Option
		if err := rows.Scan(
			&i.ID,
			&i.QuestionID,
			&i.OptionText,
			&i.OptionIndex,
			&i.IsCorrect,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
