// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: questions.sql

package db

import (
	"context"
	"database/sql"
)

const createQuestion = `-- name: CreateQuestion :one
INSERT INTO questions (question_text, created_at)
VALUES ($1, $2)
RETURNING id, question_text, created_at
`

type CreateQuestionParams struct {
	QuestionText string
	CreatedAt    sql.NullTime
}

func (q *Queries) CreateQuestion(ctx context.Context, arg CreateQuestionParams) (Question, error) {
	row := q.db.QueryRowContext(ctx, createQuestion, arg.QuestionText, arg.CreatedAt)
	var i Question
	err := row.Scan(&i.ID, &i.QuestionText, &i.CreatedAt)
	return i, err
}

const deleteQuestion = `-- name: DeleteQuestion :exec
DELETE FROM questions
WHERE id=$1
`

func (q *Queries) DeleteQuestion(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteQuestion, id)
	return err
}

const getAllQuestions = `-- name: GetAllQuestions :many
SELECT id, question_text, created_at FROM questions
`

func (q *Queries) GetAllQuestions(ctx context.Context) ([]Question, error) {
	rows, err := q.db.QueryContext(ctx, getAllQuestions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Question
	for rows.Next() {
		var i Question
		if err := rows.Scan(&i.ID, &i.QuestionText, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateQuestion = `-- name: UpdateQuestion :one
UPDATE questions
SET question_text = $2
WHERE id = $1
RETURNING id, question_text, created_at
`

type UpdateQuestionParams struct {
	ID           int32
	QuestionText string
}

func (q *Queries) UpdateQuestion(ctx context.Context, arg UpdateQuestionParams) (Question, error) {
	row := q.db.QueryRowContext(ctx, updateQuestion, arg.ID, arg.QuestionText)
	var i Question
	err := row.Scan(&i.ID, &i.QuestionText, &i.CreatedAt)
	return i, err
}
